From ebc49f9a896ad66264016eb9e59433f0ea835407 Mon Sep 17 00:00:00 2001
From: Steven Lee <sl3881@nyu.edu>
Date: Thu, 10 Mar 2016 18:08:59 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 47 +++++++++++++++++++++++++++++++++--------------
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c |  8 ++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 48 insertions(+), 14 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..beac52c 100644
--- a/proc.c
+++ b/proc.c
@@ -72,6 +72,7 @@ found:
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
+  p->num_tickets = 10;
 
   return p;
 }
@@ -103,6 +104,7 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
+  p->num_tickets = 10;
 }
 
 // Grow current process's memory by n bytes.
@@ -148,6 +150,7 @@ fork(void)
   np->sz = proc->sz;
   np->parent = proc;
   *np->tf = *proc->tf;
+  np->num_tickets = proc->num_tickets;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -241,6 +244,7 @@ wait(void)
         p->parent = 0;
         p->name[0] = 0;
         p->killed = 0;
+        p->num_tickets = 0;
         release(&ptable.lock);
         return pid;
       }
@@ -270,36 +274,49 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
-
+    
+//  cprintf("Total Tickets: %d\n", totaltickets);
+//  cprintf("Counter: %d\n", counter);
+    
   for(;;){
     // Enable interrupts on this processor.
     sti();
+    int totaltickets = 0;
+    int counter = 0;
 
     if (!foundproc) hlt();
     foundproc = 0;
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+      
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if(p->state != RUNNABLE)
+            continue;
+        totaltickets += p->num_tickets;
+    }
+    int winner = random_at_most(totaltickets);
+      
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      counter += p->num_tickets;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      foundproc = 1;
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
+      if (counter >= winner) {
+          foundproc = 1;
+          proc = p;
+          switchuvm(p);
+          p->state = RUNNING;
+          swtch(&cpu->scheduler, proc->context);
+          switchkvm();
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          proc = 0;
+      }
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -466,8 +483,10 @@ procdump(void)
     cprintf("%d %s %s", p->pid, state, p->name);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+      for(i=0; i<10 && pc[i] != 0; i++) {
         cprintf(" %p", pc[i]);
+        cprintf(" - %d Tickets \n", p->num_tickets);
+      }
     }
     cprintf("\n");
   }
diff --git a/proc.h b/proc.h
index 3b9c3ac..3661da4 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int num_tickets;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..84f3e1f 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets]    sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..3374dc6 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,11 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int sys_settickets(void) {
+    int n;
+    if(argint(0, &n) < 0)
+        return -1;
+    proc->num_tickets = n;
+    return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
2.6.4

