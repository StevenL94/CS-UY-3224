From c815260b5983c4a73848af9c1e4fce41e6f96be3 Mon Sep 17 00:00:00 2001
From: Steven Lee <sl3881@nyu.edu>
Date: Tue, 5 Apr 2016 21:45:44 -0400
Subject: [PATCH] Implement lazy allocation

---
 defs.h    |  1 +
 sysproc.c |  5 +++--
 trap.c    | 22 ++++++++++++++++++++++
 vm.c      |  6 +++---
 4 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/defs.h b/defs.h
index b47372b..3293549 100644
--- a/defs.h
+++ b/defs.h
@@ -156,6 +156,7 @@ void            idtinit(void);
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+int             mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
 
 // uart.c
 void            uartinit(void);
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..f290a0e 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -51,8 +51,9 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = proc->sz;
-  if(growproc(n) < 0)
-    return -1;
+//  if(growproc(n) < 0)
+//    return -1;
+  proc->sz +=n;
   return addr;
 }
 
diff --git a/trap.c b/trap.c
index 3f80145..457122a 100644
--- a/trap.c
+++ b/trap.c
@@ -13,6 +13,7 @@ struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
+uint vaddr;
 
 void
 tvinit(void)
@@ -77,6 +78,27 @@ trap(struct trapframe *tf)
             cpu->id, tf->cs, tf->eip);
     lapiceoi();
     break;
+  case T_PGFLT:
+    vaddr = rcr2();
+    uint a;
+    char *mem;
+    int n;
+    argint(0, &n);
+    if (vaddr + n >= KERNBASE)
+        break;
+    if (vaddr + n < vaddr)
+        break;
+    a = PGROUNDDOWN(vaddr);
+    for(; a < vaddr + n; a += PGSIZE){
+        mem = kalloc();
+        if (mem == 0) {
+            deallocuvm(proc->pgdir, vaddr + n, vaddr);
+            break;
+        }
+        memset(mem, 0, PGSIZE);
+        mappages(proc->pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+    }
+    break;
    
   //PAGEBREAK: 13
   default:
diff --git a/vm.c b/vm.c
index 5326d14..65d6bd6 100644
--- a/vm.c
+++ b/vm.c
@@ -67,7 +67,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -319,8 +319,8 @@ copyuvm(pde_t *pgdir, uint sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
+//    if(!(*pte & PTE_P))
+//      panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
-- 
2.6.4

